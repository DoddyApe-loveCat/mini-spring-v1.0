package com.csii.minispring.beans.xml;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import com.csii.minispring.beans.BeanDefinition;
import com.csii.minispring.beans.Property;
import com.csii.minispring.io.Resource;

public class BeanDefinitionReader {
	private Resource configResource;
	private Map<String, BeanDefinition> beanDefinitionMap;

	public Resource getConfigResource() {
		return configResource;
	}

	public void setConfigResource(Resource configResource) {
		this.configResource = configResource;
	}

	public BeanDefinitionReader(Resource configResource) {
		this.configResource = configResource;
		this.beanDefinitionMap = new HashMap<String, BeanDefinition>();
	}

	public void readBeanDefiniton() {
		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder;
		try {
			dBuilder = dbFactory.newDocumentBuilder();
			Document doc = dBuilder.parse(configResource.getFile());
			doc.getDocumentElement().normalize();
			NodeList nodeList = doc.getElementsByTagName("bean");

			for (int i = 0; i < nodeList.getLength(); i++) {
				Node node = nodeList.item(i);
				doLoadBeanDefinition(node);

			}
		} catch (SAXException | ParserConfigurationException | IOException e1) {
			e1.printStackTrace();
		}
	}

	public void doLoadBeanDefinition(Node node) {
		BeanDefinition beanDefinition = new BeanDefinition();
		if (node.getNodeType() == Node.ELEMENT_NODE) {
			Element element = (Element) node;
			String beanId = element.getAttribute("id");
			beanDefinition.setId(beanId);
			beanDefinition.setClassName(element.getAttribute("class"));
			beanDefinition.setProperties(getProperties(element));
			beanDefinitionMap.put(beanId, beanDefinition);
		}

	}

	private List getProperties(Element node) {

		List<Property> props = new ArrayList<Property>();

		//NodeList nodeList = node.getChildNodes();
		NodeList nodeList = node.getElementsByTagName("property");
		System.out.println(node.getElementsByTagName("property").getLength());
		
		for (int i = 0; i < nodeList.getLength(); i++) {
			Property prop = new Property();
			if (node.getNodeType() == Node.ELEMENT_NODE) {
				Element element = (Element) nodeList.item(i);
				prop.setPropsName(element.getAttribute("name"));
				String ref =  element.getAttribute("ref");
				String value = element.getAttribute("value");
				
				if (ref != null && !"".equals(ref)) {
					prop.setRefOrValue("ref");
					prop.setPropsValue(element.getAttribute("ref"));
				} else if (value != null && !"".equals(value)) {
					prop.setRefOrValue("value");
					prop.setPropsValue(element.getAttribute("value"));
				}
			}
			props.add(prop);

		}
		return props;
	}
}
